<!DOCTYPE html>
<html lang="en">
<head>
 <meta charset="utf-8">
    <title>Webpage</title>
    <style>
        /*
         * Buttons
         * tnx to: http://webdesignerwall.com/tutorials/css3-gradient-buttons
         */

        a.button.white {
         color: #606060;
         border: solid 1px #b7b7b7;
         background: #fff;
         background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ededed));
         background: -moz-linear-gradient(top, #fff, #ededed);
         filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#ededed');
        }

        a.button.black {
         color: #d7d7d7;
         border: solid 1px #333;
         background: #333;
         background: -webkit-gradient(linear, left top, left bottom, from(#666), to(#000));
         background: -moz-linear-gradient(top, #666, #000);
         filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#666666', endColorstr='#000000');
        }

        a.button.gray {
         color: #e9e9e9;
         border: solid 1px #555;
         background: #6e6e6e;
         background: -webkit-gradient(linear, left top, left bottom, from(#888), to(#575757));
         background: -moz-linear-gradient(top, #888, #575757);
         filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#888888', endColorstr='#575757');
        }

        a.button.disabled {
         color: #aaa;
         border: solid 1px #aaa;
         cursor: default;
        }

        a.button.disabled:hover {
         text-decoration: none;
        }

        a.button.temporaryDisabled:before {
         background-image: url(/static/img/gears/gears_anim_16x16.gif);
         position: absolute;
         width: 15px;
         height: 15px;
         content: '';
         pointer-events: none;
         cursor: progress;
        }

        a.button.blue {
         color: #d9eef7;
         border: solid 1px #0076a3;
         background: #0095cd;
         background: -webkit-gradient(linear, left top, left bottom, from(#00adee), to(#0078a5));
         background: -moz-linear-gradient(top, #00adee, #0078a5);
         filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00adee', endColorstr='#0078a5');
        }

        a.button {
         display: inline-block;
         outline: none;
         text-align: center;
         font: 15px/100% Arial, Helvetica, sans-serif;
         padding: .5em 2em .55em;
         text-shadow: 0 1px 1px rgba(0,0,0,.3);
         vertical-align: middle;
        }

        a.button:not(.roundNW):not(.roundSW):not(.roundNE):not(.roundSE) {
         -webkit-border-radius: .5em; 
         -moz-border-radius: .5em;
         border-radius: .5em;
         -webkit-box-shadow: 0 1px 2px rgba(0,0,0,.2);
         -moz-box-shadow: 0 1px 2px rgba(0,0,0,.2);
         box-shadow: 0 1px 2px rgba(0,0,0,.2);
        }

        a.button:not(.disabled) {
         cursor: pointer;
        }

        a.button:not(.disabled):hover {
         text-decoration: none;
         -webkit-box-shadow: 0 1px 4px rgba(0,0,0,.5);
         -moz-box-shadow: 0 1px 4px rgba(0,0,0,.5);
         box-shadow: 0 1px 4px rgba(0,0,0,.5);
        }

        a.button:not(.disabled):focus {
         text-decoration: underline;
         -webkit-box-shadow: 0 1px 4px rgba(255,128,0,.8);
         -moz-box-shadow: 0 1px 4px rgba(255,128,0,.8);
         box-shadow: 0 1px 4px rgba(255,128,0,.8);
        }

        a.button:not(.disabled):active {
         position: relative;
         top: 1px;
        }

        a.button.medium {
         font-size: 12px;
         padding: .4em 1.5em .42em;
        }

        a.button.small {
         font-size: 11px;
         padding: .2em 1em .275em;
        }

        a.button.bigrounded {
         -webkit-border-radius: 2em;
         -moz-border-radius: 2em;
         border-radius: 2em;
        }

        .buttonWrapper .Button {
         margin-left: 15pt;
    }
    </style>
    <script src="{{ url_for('static', filename='lib/mootools-core-1.5.1-full-compat-yc.js') }}"></script>
    <script src="{{ url_for('static', filename='lib/mootools-more-1.5.1-yc.js') }}"></script>
    <script src="{{ url_for('static', filename='lib/contrib/ace/ace.js') }}"></script>
    <script src="{{ url_for('static', filename='lib/contrib/ace/mode-c_cpp.js') }}"></script>
    <!-- <script src="{{ url_for('static', filename='lib/contrib/ace/theme-monkai.js') }}"></script> -->
    <script> window.addEvent('domready', function() {

        {   // See http://stackoverflow.com/questions/10590420/ace-editor-uncaught-typeerror-cannot-read-property-clientx-of-undefined
            // for detailed bug explaination (mootools/ace api collision).
            delete Function.prototype.bind;

            Function.implement({

                /*<!ES5-bind>*/
                bind: function(that){
                    var self = this,
                        args = arguments.length > 1 ? Array.slice(arguments, 1) : null,
                        F = function(){};

                    var bound = function(){
                        var context = that, length = arguments.length;
                        if (this instanceof bound){
                            F.prototype = self.prototype;
                            context = new F;
                        }
                        var result = (!args && !length)
                            ? self.call(context)
                            : self.apply(context, args && length ? args.concat(Array.slice(arguments)) : args || arguments);
                        return context == that ? result : context;
                    };
                    return bound;
                },
                /*</!ES5-bind>*/
            });
        }

        var editor = ace.edit("editor");
        //editor.setTheme("{{ url_for('static', filename='lib/contrib/src-min-noconflict/monkai') }}");
        var CppMode = ace.require("ace/mode/c_cpp").Mode;
        editor.getSession().setMode(new CppMode());
        editor.$blockScrolling = Infinity;
        editor.setOptions({
            maxLines: 20,
            readOnly: true  // will be unset, when AJAX fetching request is done.
        });

        // TODO: XXX
        editor.getSession().setValue("// loading content, please wait...");

        var fetchingRequest = new Request.JSON({
                url: "{{ url_for('target_content_exchange') }}",
                method : 'GET',
                urlEncoded : false,
                buttonChecked: $('exampleSelect-1').checked,
                onRequest : function() {
                    editor.setReadOnly(true);
                    $('submitButton').addClass('disabled');
                    $('retrieveButton').addClass('disabled');
                },
                onComplete : function(rqd) {
                    if( rqd &&
                        rqd.hasOwnProperty('content') &&
                        rqd.exists /*&&
                        rqd.hasOwnProperty('digest')*/ ) {
                        editor.getSession().setValue(rqd.content);
                        editor.setReadOnly(false);
                    } else {
                        editor.getSession().setValue('// File IO error on server side.');
                        editor.setReadOnly(true);
                        // TODO: detailed error description can be provided here this way:
                        $('errorsList').grab( new Element('li', {'text' : 'Got an IO server error.'}) );
                    }
                    $('submitButton').removeClass('disabled');
                    $('retrieveButton').removeClass('disabled');
                },
                headers : { "X-CSRFToken": "{{ csrf_token() }}",
                            'Content-type' : 'application/json',
                         },
            }),
            commitingRequest = new Request.JSON({
                url: "{{ url_for('target_content_exchange') }}",
                //data :,
                method : 'POST',
                urlEncoded : false,
                onRequest : function() {
                    editor.setReadOnly(true);
                    $('submitButton').addClass('disabled');
                    $('retrieveButton').addClass('disabled');
                },
                onComplete : function(rqd) {
                    if( rqd &&
                        rqd.hasOwnProperty('result') &&
                        rqd.result == 'updated' /*&&
                        rqd.hasOwnProperty('digest')*/ ) {
                        editor.setReadOnly(false);
                        $('submitButton').removeClass('disabled');
                    } else {
                        // TODO: detailed error description can be provided here this way:
                        $('errorsList').grab( new Element('li', {'text' : 'Got a server error.'}) );
                    }
                },
                headers : { "X-CSRFToken": "{{ csrf_token() }}",
                            'Content-type' : 'application/json',
                         },
            });

        fetchingRequest.send('radio='+$$('input[name=exampleSelect]:checked').map(function(e) { return e.value; })[0]);

        $('submitButton').addEvent('click', function(e){
                e.stop();
                commitingRequest.data
                commitingRequest.post(JSON.encode({'content' : editor.getSession().getValue()}));
            } );
        $('retrieveButton').addEvent('click', function(e){
                e.stop();
                fetchingRequest.send('radio='+$$('input[name=exampleSelect]:checked').map(function(e) { return e.value; })[0]);
            } );
    }); </script>
</head>
<body>
    <h1>Программа</h1>
    <div style="min-width: 300pt; min-height: 100pt; width:100%; margin: 0 auto; display: block;">
        <div id="editor" style="min-width: 400pt; min-height: 100pt; width:100%; display: block;"></div>
        <ul id="errorsList"></ul>
	<a href="#" class="button white" style="text-decoration: none" id="retrieveButton">Считать</a>
    <a href="#" class="button white" style="text-decoration: none" id="submitButton">Загрузить</a>

<!--     <ul id="exampleSelect">
        <input checked="" id="exampleSelect-0" name="exampleSelect" value="value" type="radio">description<br/>
        <input id="exampleSelect-1" name="exampleSelect" value="value_two" type="radio">whatever
    </ul> -->
    {{ exampleSelect.exampleSelect() }}
         
    </div>
</body>
</html>


